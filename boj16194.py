# 사용자로부터 카드의 수 N을 입력받습니다.
N = int(input())

# 카드 팩의 가격을 입력받습니다. 인덱스를 맞추기 위해 맨 앞에 0을 추가합니다.
P = [0] + list(map(int, input().split()))

# 동적 계획법을 위한 배열 dp를 초기화합니다. dp[i]는 i개의 카드를 구매하는 데 필요한 최소 비용을 저장합니다.
dp = [0] * (N + 1)

# 1부터 N까지 모든 카드 수에 대해 최소 비용을 계산합니다.
for i in range(1, N + 1):
    # 초기값 설정: i개의 카드를 한 번에 구매하는 경우의 비용
    dp[i] = P[i]
    
    # 1부터 i까지의 카드 팩을 고려하여 최소 비용을 찾습니다.
    for j in range(1, i + 1):
        # i개의 카드를 구매하는 데 필요한 최소 비용을 계산합니다.
        dp[i] = min(dp[i], dp[i - j] + P[j])

# N개의 카드를 구매하는 데 필요한 최소 비용을 출력합니다.
print(dp[N])